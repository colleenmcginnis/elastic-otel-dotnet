////
Goal of this doc:
The user is able to successfully see data from their .NET application make it to the Elastic UI via the Elastic Distribution for OpenTelemetry .NET

Assumptions we're comfortable making about the reader:
* They are familiar with Elastic
* They are familiar with OpenTelemetry
* They have dotnet installed
////

[[get-started]]
== Get started

:language: .NET
:language_lc: dotnet
:distro_name: Elastic Distribution for OpenTelemetry {language}

include::release-status.asciidoc[]

This guide shows you how to use the {distro_name} ("the distro") to instrument your {language} application and send OpenTelemetry data to an Elastic Observability deployment.

[NOTE]
====
As an OpenTelemetry SDK, the distro supports sending data to any OpenTelemetry protocol (OTLP) endpoint (https://opentelemetry.io/docs/collector/[OpenTelemetry Collector]), but this guide assumes you are sending data to Elastic.
====

////
✅ What the user needs to know and/or do before they install the distro
////
[discrete]
[[get-started-prerequisites]]
=== Prerequisites

Before getting started:

// Familiarity with OpenTelemetry
* *Familiarize yourself with the OpenTelemetry SDK.* The distro is a lightweight wrapper around the OpenTelemetry SDK. You should be broadly familiar with the OpenTelemetry SDK concepts and instrumenting applications using the Microsoft diagnostic APIs. If you are not familiar with this, start with the https://opentelemetry.io/docs/languages/net[OpenTelemetry SDK documentation].
// Any dependencies (including specific supported versions)
* *Check your .NET SDK version.* The current documentation and examples are written with .NET 6 and newer applications in mind. Before continuing, ensure that you have a supported https://dotnet.microsoft.com/en-us/download/dotnet[.NET SDK version] installed locally.
+
* *Set up Elastic Observability*. You'll need somewhere to send the gathered OpenTelemetry data, so it can be viewed and analyzed. This doc assumes you're using an https://www.elastic.co/observability[Elastic Observability] cloud deployment. You can use an existing one or set up a new one.
+
[[elastic-observability-setup]]
[%collapsible]
.*Expand for setup instructions*
====
This section shows how to create an https://www.elastic.co/observability[Elastic Observability] cloud deployment and get the data you need to configure the distro to send data to it.

. Register at https://cloud.elastic.co/registration[cloud.elastic.co], if you haven't already. This supports starting **free trial**.
. After registering, click *Create deployment* at `<https://cloud.elastic.co/home>`.
. Once that is created, click *Open* to visit your Kibana home page, e.g. `https://{DEPLOYMENT_NAME}.kb.{REGION}.cloud.es.io/app/home#/getting_started`.
====

////
✅ How to install the distro
////
[discrete]
[[get-started-install]]
=== Install

////
✅ Step-by-step instructions
////
To get started with the Elastic OpenTelemetry Distribution for .NET, add the `Elastic.OpenTelemetry` NuGet package reference to your project file:

[source,xml]
----
<PackageReference Include="Elastic.OpenTelemetry" Version="0.1.0-alpha.1" />
----

After adding the package reference, you can start using the distro
in your application.

////
✅ Any additional info related to installation
////
[NOTE]
.The Elastic distro and the OpenTelemetry SDK
====
The distro includes a transitive dependency on the OpenTelemetry SDK, so you do not _need_ to add the
OpenTelemetry SDK package to your project directly. However, you _can_ explicitly add the OpenTelemetry SDK as a dependency if you want to opt into newer SDK versions. If you do this, the OpenTelemetry SDK dependency must
be defined _before_ the Elastic OpenTelemetry Distribution for .NET is defined.
====

[NOTE]
.Migrating from the OpenTelemetry SDK to the Elastic distro
====
The distro is designed to be easy to use and integrate into your applications.
This includes applications that have previously used the OpenTelemetry SDK directly.
In situations where the OpenTelemetry SDK is already used, the only required change is
to add the `Elastic.OpenTelemetry` NuGet package to the project. Doing so will automatically
switch to the opinionated configuration provided by the Elastic distro.
====

////
✅ Start-to-finish operation
////
[discrete]
[[get-started-send-data]]
=== Send data to Elastic from an ASP.NET Core application

The OpenTelemetry SDK and the distro provide extension methods to enable observability
features in your application with a few lines of code.

It's common to want to instrument ASP.NET Core applications based on the `Microsoft.Extensions.Hosting`
libraries, which provide dependency injection via an `IServiceProvider`.

If you want to instrument an ASP.NET Core minimal API application using the distro, follow the
steps below. Similar steps can also be used to instrument other ASP.NET Core workloads and other
host-based applications like https://learn.microsoft.com/en-us/dotnet/core/extensions/workers[worker services].

[NOTE]
====
The examples below assume your code uses the top-level statements feature introduced in C# 9.0
and the default choice for applications created using the latest templates.
====

////
✅ Any dependencies that need to be installed in addition to the distro
////
[discrete]
[[get-started-add-dependencies]]
==== Add dependencies

. To take advantage of the OpenTelemetry SDK instrumentation for ASP.NET Core, add the following
NuGet package to your project:
+
[source,xml]
----
<PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.7.0" />
----
+
This package includes instrumentation to collect traces for requests handled by ASP.NET Core endpoints.
+
[NOTE]
====
The ASP.NET Core instrumentation is not included by default in the distro.
As with all optional instrumentation libraries, you can choose to include them in your application by
adding a suitable package reference.
====

. Inside the `Program.cs` file of the ASP.NET Core application, add the following two using directives:
+
[source,csharp]
----
using OpenTelemetry;
using OpenTelemetry.Trace;
----
+
The OpenTelemetry SDK provides extension methods on the `IServiceCollection` to enable the providers
and configure the SDK. The distro overrides the default OpenTelemetry SDK registration, adding several
opinionated defaults.

. In the minimal API template, the `WebApplicationBuilder` exposes a `Services` property that can be used
to register services with the dependency injection container. To enable tracing and metrics collection,
ensure that the OpenTelemetry SDK is registered:
+
[source,csharp]
----
var builder = WebApplication.CreateBuilder(args);

builder.Services
	.AddHttpClient() <1>
	.AddOpenTelemetry() <2>
		.WithTracing(t => t.AddAspNetCoreInstrumentation()); <3>
----
<1> The `AddHttpClient` method registers the `IHttpClientFactory` service with the dependency
injection container. This is NOT required to enable OpenTelemetry, but the example endpoint will use it to
send an HTTP request.
<2> The `AddOpenTelemetry` method registers the OpenTelemetry SDK with the dependency injection
container. When available, the distro will override this to add opinionated defaults.
<3> Configure tracing to instrument requests handled by ASP.NET Core.

With these limited changes to the `Program.cs` file, the application is now configured to use the
OpenTelemetry SDK and the distro to collect traces and metrics, which are exported via the
OpenTelemetry protocol (OTLP).

[discrete]
[[get-started-sample-endpoint]]
==== Add a sample endpoint

To demonstrate the tracing capabilities, add a simple endpoint to the application:

[source,csharp]
----
app.MapGet("/", async (IHttpClientFactory httpClientFactory) =>
{
	using var client = httpClientFactory.CreateClient();

	await Task.Delay(100);
	var response = await client.GetAsync("http://elastic.co"); <1>
	await Task.Delay(50);

	return response.StatusCode == System.Net.HttpStatusCode.OK ? Results.Ok() : Results.StatusCode(500);
});
----
<1> Using this URL will require two redirects, allowing us to see multiple spans in the trace.

The distro will automatically enable the exporting of signals via the OTLP exporter. This
exporter requires that endpoint(s) are configured. A common mechanism for configuring
endpoints is via environment variables.

////
✅ Provide _minimal_ configuration/setup
////
[discrete]
[[get-started-configure]]
==== Configure the distro

To configure the distro, at a minimum you'll need the deployment's OTLP endpoint and
authorization data to set the appropriate `OTLP_*` environment variables:

* `OTEL_EXPORTER_OTLP_ENDPOINT`: The full URL of the endpoint where data will be sent.
* `OTEL_EXPORTER_OTLP_HEADERS`: A comma-separated list of `key=value` pairs that will
be added to the headers of every request. This is typically this is used for
authentication information.

[NOTE]
====
The steps below assume you are using an Elastic Cloud deployment as the destination
for your observability data.
====

////
✅ Step-by-step instructions
////
When sending data to Elastic, you can find the values of these variables in Kibana's APM setup guide:

. In {kib}, go to *Setup guides*.
. Select *Observability*.
. Select *Monitor my application performance*.
. Scroll down and select the *OpenTelemetry* option.
+
image:images/elastic-cloud-opentelemetry-configuration.png[Elastic Cloud OpenTelemetry configuration]

. Configure environment variables for the application either in `launchSettings.json` or in the environment
where the application is running.
. Once configured, run the application and make a request to the root endpoint. A trace will be generated
and exported to the OTLP endpoint.

For more information on all the available configuration options, refer to <<configure>>.

////
✅ What success looks like
////
[discrete]
[[get-started-view-traces]]
=== View traces

To view the traces, you can use the Elastic APM UI:

////
TO DO: Verify step-by-step instructions
////
In {kib}:

. Go to *APM* -> *Traces*.
. You should see the service you just started tracking.
. Click on the name in the list to see traces.

image:images/trace-sample-minimal-api.png[Minimal API request trace sample in the Elastic APM UI]

////
✅ What they should do next
////
[discrete]
[[get-started-next-steps]]
=== Next steps

* Browse all <<configure,distro configuration options>>.
* Learn more about viewing and interpreting data in the {observability-guide}/apm.html[Observability guide].

:!language:
:!language_lc:
:!distro_name:
